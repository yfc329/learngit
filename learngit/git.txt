选择文件
$ git add readme.txt

提交文件+事件内容 
$ git commit -m "branch test"

查看日志
$ git log
$ git log --pretty=oneline

版本回退
$ git reset --hard HEAD^ 回退上一个

回退指定版本
$ git reset --hard 1094a


克隆库
$ git clone https://github.com/yfc329/gitskills.git


首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换


直接切换
$ git checkout master

合并项目快速模式
$ git merge dev

git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

合并项目普通模式
$ git merge --no-ff -m "merge with no-ff" dev

查看分支
$ git branch

删除分支
$ git branch -d dev

强行删除
$ git branch -D feature-vulcan

暂存修改
$ git stash

恢复修改
$ git stash pop

多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

创建标签
$ git tag v1.0

创建标签带版本号
$ git tag v0.9 b0a5487 

查看标签
$ git tag

显示标签内容
$ git show v1.0

删除标签
$ git tag -d v0.1

推送远程标签
$ git push origin v1.0

推送所有远程标签
$ git push origin --tags

删除远程标签（需先删除本地标签）
$ git push origin :refs/tags/v0.9